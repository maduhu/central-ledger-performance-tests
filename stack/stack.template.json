{
    "Mappings": {
        "Region2Principal": {
            "ap-northeast-1": {
                "EC2Principal": "ec2.amazonaws.com",
                "OpsWorksPrincipal": "opsworks.amazonaws.com"
            },
            "ap-southeast-1": {
                "EC2Principal": "ec2.amazonaws.com",
                "OpsWorksPrincipal": "opsworks.amazonaws.com"
            },
            "ap-southeast-2": {
                "EC2Principal": "ec2.amazonaws.com",
                "OpsWorksPrincipal": "opsworks.amazonaws.com"
            },
            "cn-north-1": {
                "EC2Principal": "ec2.amazonaws.com.cn",
                "OpsWorksPrincipal": "opsworks.amazonaws.com.cn"
            },
            "eu-central-1": {
                "EC2Principal": "ec2.amazonaws.com",
                "OpsWorksPrincipal": "opsworks.amazonaws.com"
            },
            "eu-west-1": {
                "EC2Principal": "ec2.amazonaws.com",
                "OpsWorksPrincipal": "opsworks.amazonaws.com"
            },
            "sa-east-1": {
                "EC2Principal": "ec2.amazonaws.com",
                "OpsWorksPrincipal": "opsworks.amazonaws.com"
            },
            "us-east-1": {
                "EC2Principal": "ec2.amazonaws.com",
                "OpsWorksPrincipal": "opsworks.amazonaws.com"
            },
            "us-west-1": {
                "EC2Principal": "ec2.amazonaws.com",
                "OpsWorksPrincipal": "opsworks.amazonaws.com"
            },
            "us-west-2": {
                "EC2Principal": "ec2.amazonaws.com",
                "OpsWorksPrincipal": "opsworks.amazonaws.com"
            }
        }
    },
    "Outputs": {
        "CentralLedgerRepositoryURL": {
            "Description": "The docker repository URL",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        {
                            "Ref": "AWS::AccountId"
                        },
                        ".dkr.ecr.",
                        {
                            "Ref": "AWS::Region"
                        },
                        ".amazonaws.com/",
                        {
                            "Ref": "CentralLedgerRepository"
                        }
                    ]
                ]
            }
        },
        "PerformanceTestsRepositoryURL": {
            "Description": "The docker repository URL",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        {
                            "Ref": "AWS::AccountId"
                        },
                        ".dkr.ecr.",
                        {
                            "Ref": "AWS::Region"
                        },
                        ".amazonaws.com/",
                        {
                            "Ref": "PerformanceTestsRepository"
                        }
                    ]
                ]
            }
        },
        "URL": {
            "Description": "URL of the AWS Elastic Beanstalk Environment",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "http://",
                        {
                            "Fn::GetAtt": [
                                "EBEnvironment",
                                "EndpointURL"
                            ]
                        }
                    ]
                ]
            }
        }
    },
    "Parameters": {
        "DatabaseAllocatedStorage": {
            "ConstraintDescription": "must be between 5 and 1024Gb.",
            "Default": "5",
            "Description": "The size of the database (Gb)",
            "MaxValue": "1024",
            "MinValue": "5",
            "Type": "Number"
        },
        "DatabaseClass": {
            "AllowedValues": [
                "db.t2.micro",
                "db.t2.small",
                "db.t2.medium",
                "db.t2.large"
            ],
            "ConstraintDescription": "must select a valid database instance type.",
            "Default": "db.t2.micro",
            "Description": "Database instance class",
            "Type": "String"
        },
        "DatabaseEngineVersion": {
            "Default": "",
            "Description": "Database engine version to use",
            "Type": "String"
        },
        "DatabaseMultiAZ": {
            "AllowedValues": [
                "true",
                "false"
            ],
            "ConstraintDescription": "must choose true or false.",
            "Default": "false",
            "Description": "Whether or not to create a MultiAZ database",
            "Type": "String"
        },
        "DatabaseName": {
            "Default": "app",
            "Description": "The database name",
            "MaxLength": "64",
            "MinLength": "1",
            "Type": "String"
        },
        "DatabasePassword": {
            "Description": "The database admin account password",
            "MaxLength": "41",
            "MinLength": "10",
            "NoEcho": true,
            "Type": "String"
        },
        "DatabaseUser": {
            "Default": "app",
            "Description": "The database admin account username",
            "MaxLength": "16",
            "MinLength": "1",
            "Type": "String"
        },
        "KeyName": {
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair.",
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the AWS Elastic Beanstalk instance",
            "Type": "AWS::EC2::KeyPair::KeyName"
        }
    },
    "Resources": {
        "CentralLedgerRepository": {
            "Properties": {
                "RepositoryName": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "-central-ledger"
                        ]
                    ]
                },
                "RepositoryPolicyText": {
                    "Statement": [
                        {
                            "Action": [
                                "ecr:GetDownloadUrlForLayer",
                                "ecr:BatchGetImage",
                                "ecr:BatchCheckLayerAvailability",
                                "ecr:PutImage",
                                "ecr:InitiateLayerUpload",
                                "ecr:UploadLayerPart",
                                "ecr:CompleteLayerUpload"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": [
                                    {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:iam::",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":root"
                                            ]
                                        ]
                                    }
                                ]
                            },
                            "Sid": "AllowPushPull"
                        }
                    ],
                    "Version": "2008-10-17"
                }
            },
            "Type": "AWS::ECR::Repository"
        },
        "ContainerARouteTableAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "SubnetId": {
                    "Ref": "ContainerASubnet"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "ContainerASubnet": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        "0",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "10.0.10.0/24",
                "MapPublicIpOnLaunch": "true",
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "ContainerBRouteTableAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "SubnetId": {
                    "Ref": "ContainerBSubnet"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "ContainerBSubnet": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        "1",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "10.0.11.0/24",
                "MapPublicIpOnLaunch": "true",
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "ContainerSecurityGroup": {
            "Properties": {
                "GroupDescription": "Container security group.",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "10.0.2.0/24",
                        "FromPort": 80,
                        "IpProtocol": "tcp",
                        "ToPort": 80
                    },
                    {
                        "CidrIp": "10.0.3.0/24",
                        "FromPort": 80,
                        "IpProtocol": "tcp",
                        "ToPort": 80
                    }
                ],
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "DatabaseSecurityGroup": {
            "Properties": {
                "GroupDescription": "Database security group.",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "10.0.10.0/24",
                        "FromPort": "5432",
                        "IpProtocol": "tcp",
                        "ToPort": "5432"
                    },
                    {
                        "CidrIp": "10.0.11.0/24",
                        "FromPort": "5432",
                        "IpProtocol": "tcp",
                        "ToPort": "5432"
                    }
                ],
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "DatabaseSubnetGroup": {
            "Properties": {
                "DBSubnetGroupDescription": "Subnets available for the RDS DB Instance",
                "SubnetIds": [
                    {
                        "Ref": "ContainerASubnet"
                    },
                    {
                        "Ref": "ContainerBSubnet"
                    }
                ]
            },
            "Type": "AWS::RDS::DBSubnetGroup"
        },
        "EBApplication": {
            "Properties": {
                "Description": "AWS Elastic Beanstalk Application"
            },
            "Type": "AWS::ElasticBeanstalk::Application"
        },
        "EBEnvironment": {
            "Properties": {
                "ApplicationName": {
                    "Ref": "EBApplication"
                },
                "Description": "AWS Elastic Beanstalk Environment",
                "OptionSettings": [
                    {
                        "Namespace": "aws:ec2:vpc",
                        "OptionName": "VPCId",
                        "Value": {
                            "Ref": "Vpc"
                        }
                    },
                    {
                        "Namespace": "aws:ec2:vpc",
                        "OptionName": "AssociatePublicIpAddress",
                        "Value": "true"
                    },
                    {
                        "Namespace": "aws:ec2:vpc",
                        "OptionName": "Subnets",
                        "Value": {
                            "Fn::Join": [
                                ",",
                                [
                                    {
                                        "Ref": "ContainerASubnet"
                                    },
                                    {
                                        "Ref": "ContainerBSubnet"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Namespace": "aws:ec2:vpc",
                        "OptionName": "ELBSubnets",
                        "Value": {
                            "Fn::Join": [
                                ",",
                                [
                                    {
                                        "Ref": "LoadbalancerASubnet"
                                    },
                                    {
                                        "Ref": "LoadbalancerBSubnet"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Namespace": "aws:autoscaling:launchconfiguration",
                        "OptionName": "InstanceType",
                        "Value": "t2.micro"
                    },
                    {
                        "Namespace": "aws:autoscaling:launchconfiguration",
                        "OptionName": "EC2KeyName",
                        "Value": {
                            "Ref": "KeyName"
                        }
                    },
                    {
                        "Namespace": "aws:autoscaling:launchconfiguration",
                        "OptionName": "IamInstanceProfile",
                        "Value": {
                            "Ref": "WebServerInstanceProfile"
                        }
                    },
                    {
                        "Namespace": "aws:autoscaling:launchconfiguration",
                        "OptionName": "SecurityGroups",
                        "Value": {
                            "Fn::Join": [
                                ",",
                                [
                                    {
                                        "Ref": "ContainerSecurityGroup"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Namespace": "aws:elb:loadbalancer",
                        "OptionName": "SecurityGroups",
                        "Value": {
                            "Fn::Join": [
                                ",",
                                [
                                    {
                                        "Ref": "LoadBalancerSecurityGroup"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Namespace": "aws:elasticbeanstalk:application:environment",
                        "OptionName": "CLEDG_DATABASE_URI",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "postgres://",
                                    {
                                        "Ref": "DatabaseUser"
                                    },
                                    ":",
                                    {
                                        "Ref": "DatabasePassword"
                                    },
                                    "@",
                                    {
                                        "Fn::GetAtt": [
                                            "PostgreSQL",
                                            "Endpoint.Address"
                                        ]
                                    },
                                    "/",
                                    {
                                        "Ref": "DatabaseName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Namespace": "aws:elasticbeanstalk:application:environment",
                        "OptionName": "CLEDG_EXPIRES_TIMEOUT",
                        "Value": "1800000"
                    }
                ],
                "SolutionStackName": "64bit Amazon Linux 2016.09 v2.5.0 running Multi-container Docker 1.12.6 (Generic)"
            },
            "Type": "AWS::ElasticBeanstalk::Environment"
        },
        "GatewayAttachement": {
            "Properties": {
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                },
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::VPCGatewayAttachment"
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway"
        },
        "LoadBalancerSecurityGroup": {
            "Properties": {
                "GroupDescription": "Web load balancer security group.",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "443",
                        "IpProtocol": "tcp",
                        "ToPort": "443"
                    }
                ],
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "LoadbalancerASubnet": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        "0",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "10.0.2.0/24",
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "LoadbalancerASubnetRouteTableAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "SubnetId": {
                    "Ref": "LoadbalancerASubnet"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "LoadbalancerBSubnet": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        "1",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "10.0.3.0/24",
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "LoadbalancerBSubnetRouteTableAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "SubnetId": {
                    "Ref": "LoadbalancerBSubnet"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "PerformanceTestsRepository": {
            "Properties": {
                "RepositoryName": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "-performance-tests"
                        ]
                    ]
                },
                "RepositoryPolicyText": {
                    "Statement": [
                        {
                            "Action": [
                                "ecr:GetDownloadUrlForLayer",
                                "ecr:BatchGetImage",
                                "ecr:BatchCheckLayerAvailability",
                                "ecr:PutImage",
                                "ecr:InitiateLayerUpload",
                                "ecr:UploadLayerPart",
                                "ecr:CompleteLayerUpload"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": [
                                    {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:iam::",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":root"
                                            ]
                                        ]
                                    }
                                ]
                            },
                            "Sid": "AllowPushPull"
                        }
                    ],
                    "Version": "2008-10-17"
                }
            },
            "Type": "AWS::ECR::Repository"
        },
        "PostgreSQL": {
            "DeletionPolicy": "Snapshot",
            "Properties": {
                "AllocatedStorage": {
                    "Ref": "DatabaseAllocatedStorage"
                },
                "BackupRetentionPeriod": "7",
                "DBInstanceClass": {
                    "Ref": "DatabaseClass"
                },
                "DBName": {
                    "Ref": "DatabaseName"
                },
                "DBSubnetGroupName": {
                    "Ref": "DatabaseSubnetGroup"
                },
                "Engine": "postgres",
                "EngineVersion": {
                    "Ref": "DatabaseEngineVersion"
                },
                "MasterUserPassword": {
                    "Ref": "DatabasePassword"
                },
                "MasterUsername": {
                    "Ref": "DatabaseUser"
                },
                "MultiAZ": {
                    "Ref": "DatabaseMultiAZ"
                },
                "StorageType": "gp2",
                "VPCSecurityGroups": [
                    {
                        "Ref": "DatabaseSecurityGroup"
                    }
                ]
            },
            "Type": "AWS::RDS::DBInstance"
        },
        "PublicRoute": {
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            },
            "Type": "AWS::EC2::Route"
        },
        "PublicRouteTable": {
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::RouteTable"
        },
        "PublicSubnet": {
            "Properties": {
                "CidrBlock": "10.0.1.0/24",
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "PublicSubnetRouteTableAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "SubnetId": {
                    "Ref": "PublicSubnet"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "Vpc": {
            "Properties": {
                "CidrBlock": "10.0.0.0/16"
            },
            "Type": "AWS::EC2::VPC"
        },
        "WebServerInstanceProfile": {
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "WebServerRole"
                    }
                ]
            },
            "Type": "AWS::IAM::InstanceProfile"
        },
        "WebServerRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    {
                                        "Fn::FindInMap": [
                                            "Region2Principal",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "EC2Principal"
                                        ]
                                    }
                                ]
                            }
                        }
                    ]
                },
                "Path": "/"
            },
            "Type": "AWS::IAM::Role"
        },
        "WebServerRolePolicy": {
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "NotAction": "iam:*",
                            "Resource": [
                                "*"
                            ]
                        }
                    ]
                },
                "PolicyName": "WebServerRole",
                "Roles": [
                    {
                        "Ref": "WebServerRole"
                    }
                ]
            },
            "Type": "AWS::IAM::Policy"
        }
    }
}
